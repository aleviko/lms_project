===
Подтянуть домой наделанное на работе:
[a1@Comp2 ~]$ cd /home/a1/PycharmProjects/lms_project/
[a1@Comp2 lms_project]$ git pull https://github.com/aleviko/lms_project
===
Вытянуть все домой/на сервер из репозитория:
cd <куда-нибудь в свободное место>
git clone https://github.com/aleviko/lms_project
затереть старые локальные файлы и положить на их место клона
===
Запустить сервер мюскуля:
[a1@Comp2 lms_project]$ su -
Password:
[root@Comp2 ~]#
[root@Comp2 ~]# service mysqld start
[root@Comp2 ~]# exit
выход
[a1@Comp2 lms_project]$
===
Тестовый веб-сервер
Запустить: $ python manage.py runserver
Вытряхнуть старые (не все, только старые) сессии: $ python manage.py clearsessions
===
Консоль Джанго
В режиме отладки: $ python manage.py debugsqlshell  (выход по Ctrl+D)
===
Подготовить миграции: python manage.py makemigrations
Применить миграции: python manage.py migrate
===
шрифты и стили: https://fonts.google.com/
===
когда изменения в стиле упорно не отображаются в Firefox, обновить "мимо кеша":
нажать мышкой "Обновить текущую страницу", удерживая [Shift]
===
http://127.0.0.1:8000/courses/
http://127.0.0.1:8000/admin/
===
SQL:
#Заготовка для 99% моих подзапросов:
rec_exists = Course.objects.filter(title='Варка кофе').exists()
if rec_exists:
    rec = Course.objects.get(title='Варка кофе')
    print('В курсе: ' + rec.title + ' Найдено уроков: ' + str(rec.lesson_set.count()) + ': ')
    rec.lesson_set.all()
===
from django.db.models import Q, F, Sum, Count
from learning.models import Course
>>> for c in Course.objects.filter(title__contains='кофе'):
...     print(c.title, c.price)
for c in Course.objects.exclude(price__lte=10): # NOT в SQL запросе
rec = Course.objects.get(title='Варка кофе')  # GET по ключу или не только?
Course.objects.all().order_by('price')
Course.objects.all().order_by('-price')  # по убыванию
for l in Lesson.objects.filter(course__title__icontains='варка'):
for c in Course.objects.values('title', 'price'):
c = Course.objects.values_list('title', 'price')
c = Course.objects.values_list('title', flat=True)
c = Course.objects.in_bulk(['кошкин дом', 'Жарка яичницы'], field_name='title')


from django.db.models import F - непойми зачем нужная фигня

from django.db.models import Q
c = Course.objects.filter(Q(title__icontains='коФ'))

from django.db.models import Min
min = Course.objects.aggregate(Min('price'))  # Min, Max, Sum, Count, Avg


===
Фильтры:
# Для чисел:
# __lt = меньше, __gt = больше
# __lte = меньше или равно, __gte = больше или равно
# Для строк:
# __contains, __startswith, __endswith, __exact = '=' - регистр учитывается
# __icontains, __istartswith, __iendswith, __iexact = '=' - регистр НЕучитывается
# Для ДАТ:
# __date - значение поля как объект date из поля datetime
# __time - значение поля как объект time из поля datetime
# __year - год, __month, __day, __hour, __minite, __second
# __week - номер недели. А ДЕНЬ недели?
# Другое:
# __isnull
# __in=[набор значений через запятую]

===
Транзакции:
@transaction.atomic, @transaction.non_atomic_requests
transaction.atomic()

set_autocommit(True/False), get_autocommit, commit, savepoint(?id?), savepoint_commit(id),
rollback, savepoint_rollback(id), clean_savepoints
===
Кеширование
...в БД:
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'cache_table',
    }
}
python manage.py createcachetable
...Редиской:
запустить сервер: # service redis start
потрогать клиентом: $ redis-cli
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/0',
    }
}
127.0.0.1:6379 - адрес, можно взять из клиента
/0 - номер БД, тут можно фантазировать

===Предпродакшн
Работа с DEBUG=False, но с графикой на тестовом сервере:
python manage.py runserver --insecure
Проверка перед выгрузкой на сервер:
python manage.py check --deploy
pip freeze > requirements.txt
